{"version":3,"sources":["SimpleAppBar.js","Page.js","PageWithAppBar.js","companies/ui/constants.js","companies/ui/table/CompaniesTable.js","companies/domain/_mocks/companies.js","companies/ui/CompaniesTablePage.js","companies/domain/services/getCompanies.js","companies/domain/services/getCompanyById.js","companies/ui/details/CompanyDetails.js","companies/ui/CompanyDetailsPage.js","App.js","serviceWorker.js","index.js"],"names":["SimpleAppBar","props","classes","title","react_default","a","createElement","AppBar_default","position","Toolbar_default","IconButton_default","className","menuButton","color","aria-label","Menu_default","Typography_default","variant","defaultProps","withStyles","theme","flexGrow","marginLeft","marginRight","buttonIconLeft","spacing","unit","root","display","flexFlow","height","_ref","children","PageWithAppBar","appBar","isLoading","src_Page","gridContainer","CircularProgress_default","progress","src_SimpleAppBar","maxHeight","overflow","alignSelf","margin","PropTypes","shape","id","number","isRequired","name","string","lastUpdated","instanceOf","Date","CompaniesTable","companies","Paper_default","Table_default","table","TableHead_default","TableRow_default","TableCell_default","align","TableBody_default","map","company","key","component","scope","risk","toLocaleString","Tooltip_default","react_router_dom","to","concat","Edit_default","fontSize","Refresh_default","Fab_default","fab","Add_default","width","overflowX","minWidth","bottom","right","_mocks_companies","CompaniesTablePage","_useState","useState","risks","_useState2","Object","slicedToArray","state","setState","fetchCompanies","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","Promise","resolve","setTimeout","sent","stop","apply","this","arguments","useEffect","src_PageWithAppBar","table_CompaniesTable","getCompanyById","reject","find","c","Error","CompanyDetails","Grid_default","container","item","xs","TextField_default","autoFocus","label","defaultValue","CompanyDetailsPage","match","companyId","Number","params","fetchCompany","_ref2","result","objectSpread","finish","undefined","details_CompanyDetails","App","react_router","exact","path","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4abfdfd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst styles = theme => ({\n  title: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n  buttonIconLeft: {\n    marginRight: theme.spacing.unit,\n  }\n});\n\nfunction SimpleAppBar(props) {\n  const { classes, title } = props;\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.title}>\n          {title}\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nSimpleAppBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n  title: PropTypes.string,\n};\n\nSimpleAppBar.defaultProps = {\n  title: 'Logistics Risks Calculator',\n};\n\nexport default withStyles(styles)(SimpleAppBar);\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst styles = {\n  root: {\n    display: 'flex',\n    flexFlow: 'column nowrap',\n    flexGrow: 1,\n    height: '100%',\n  },\n};\n\nfunction Page({ classes, children }) {\n  return <div className={classes.root}>{ children }</div>\n}\n\nexport default withStyles(styles)(Page);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nimport SimpleAppBar from './SimpleAppBar';\nimport Page from './Page';\n\n\nconst styles = {\n  gridContainer: {\n    display: 'flex',\n    flexGrow: 1,\n    maxHeight: '100%',\n    overflow: 'auto',\n  },\n  progress: {\n    alignSelf: 'center',\n    margin: 'auto',\n  },\n};\n\n\nfunction PageWithAppBar({ appBar, classes, children, isLoading }) {\n  return (\n    <Page>\n      { appBar }\n      <div className={classes.gridContainer}>\n        {isLoading ? <CircularProgress className={classes.progress}/> : children}\n      </div>\n    </Page>\n  )\n}\n\nPageWithAppBar.propTypes = {\n  appBar: PropTypes.node,\n  children: PropTypes.node,\n  classes: PropTypes.object.isRequired,\n  isLoading: PropTypes.bool,\n};\n\nPageWithAppBar.defaultProps = {\n  appBar: <SimpleAppBar />,\n  isLoading: false,\n};\n\nexport default withStyles(styles)(PageWithAppBar);\n","import PropTypes from 'prop-types';\n\nexport const COMPANY_SHAPE = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  lastUpdated: PropTypes.instanceOf(Date),\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles/index';\nimport Table from '@material-ui/core/Table/index';\nimport TableBody from '@material-ui/core/TableBody/index';\nimport TableCell from '@material-ui/core/TableCell/index';\nimport TableHead from '@material-ui/core/TableHead/index';\nimport TableRow from '@material-ui/core/TableRow/index';\nimport IconButton from \"@material-ui/core/IconButton/index\";\nimport Tooltip from \"@material-ui/core/Tooltip/index\";\nimport Fab from \"@material-ui/core/Fab/index\";\nimport Paper from '@material-ui/core/Paper/index';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\n\nimport { COMPANY_SHAPE } from '../constants';\n\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 700,\n  },\n  fab: {\n    position: 'absolute',\n    bottom: theme.spacing.unit * 4,\n    right: theme.spacing.unit * 4,\n  },\n});\n\nfunction CompaniesTable(props) {\n  const { classes, companies } = props;\n\n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>Company name</TableCell>\n            <TableCell align=\"center\">Risk</TableCell>\n            <TableCell align=\"center\">Last updated</TableCell>\n            <TableCell />\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {companies.map(company => (\n            <TableRow key={company.id}>\n              <TableCell component=\"th\" scope=\"row\">\n                {company.name}\n              </TableCell>\n              <TableCell align=\"center\">{company.risk}%</TableCell>\n              <TableCell align=\"center\">{company.lastUpdated.toLocaleString()}</TableCell>\n              <TableCell align=\"right\">\n                <Tooltip title=\"Recalculate\">\n                  <Link to={`/details/${company.id}`}>\n                    <IconButton aria-label=\"Recalculate\">\n                      <EditIcon fontSize=\"small\"/>\n                    </IconButton>\n                  </Link>\n                </Tooltip>\n                <Tooltip title=\"Recalculate\">\n                  <IconButton aria-label=\"Recalculate\">\n                    <RefreshIcon fontSize=\"small\"/>\n                  </IconButton>\n                </Tooltip>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <Fab\n        className={classes.fab}\n        color=\"primary\"\n      >\n        <AddIcon />\n      </Fab>\n    </Paper>\n  );\n}\n\nCompaniesTable.propTypes = {\n  classes: PropTypes.object.isRequired,\n  companies: PropTypes.arrayOf(COMPANY_SHAPE),\n};\n\nCompaniesTable.defaultProps = {\n  companies: [],\n};\n\nexport default withStyles(styles)(CompaniesTable);\n","export default [\n  { id: 1, name: 'Company #1', risk: 98, lastUpdated: new Date() },\n  { id: 2, name: 'Company #2', risk: 45, lastUpdated: new Date() },\n  { id: 3, name:'Company #3', risk: 9, lastUpdated: new Date() },\n  { id: 4, name:'Company #4', risk: 12, lastUpdated: new Date() },\n  { id: 5, name:'Company #5', risk: 69, lastUpdated: new Date() },\n];\n","import React, { useEffect, useState } from 'react';\n\nimport PageWithAppBar from '../../PageWithAppBar';\n\nimport CompaniesTable from './table/CompaniesTable';\nimport getCompanies from '../domain/services/getCompanies';\n\n\nfunction CompaniesTablePage() {\n  const [state, setState] = useState({\n    companies: [],\n    isLoading: false,\n    risks: [],\n  });\n\n  const fetchCompanies = async () => {\n    setState({ isLoading: true });\n    const companies = await getCompanies();\n    setState({\n      companies,\n      isLoading: false\n    });\n  };\n\n  useEffect(() => {\n    fetchCompanies();\n  }, []);\n\n  return (\n    <PageWithAppBar isLoading={state.isLoading}>\n      <CompaniesTable companies={state.companies} />\n    </PageWithAppBar>\n  );\n}\n\nexport default CompaniesTablePage;\n","import companies from '../_mocks/companies';\n\nexport default function getCompanies() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(companies);\n    }, 3000);\n  });\n}\n","import companies from '../_mocks/companies';\n\nexport default function getCompanyById(id) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const company = companies.find((c) => c.id === id);\n\n      if (!company) {\n        reject(new Error(`Company with id (${id}) is not found`));\n        return;\n      }\n\n      resolve(company);\n    }, 3000);\n  });\n}\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport { COMPANY_SHAPE } from '../constants';\n\n\nfunction CompanyDetails({ company }) {\n  return (\n    <Grid container spacing={40}>\n      <Grid\n        item\n        xs={6}\n      >\n        <TextField\n          autoFocus\n          id=\"name\"\n          label=\"Name\"\n          defaultValue={company.name}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n\nCompanyDetails.propTypes = {\n  company: COMPANY_SHAPE.isRequired,\n};\n\n\nexport default CompanyDetails;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport PageWithAppBar from '../../PageWithAppBar';\nimport SimpleAppBar from '../../SimpleAppBar';\n\nimport getCompanyById from '../domain/services/getCompanyById';\nimport CompanyDetails from \"./details/CompanyDetails\";\n\n\nfunction CompanyDetailsPage({ match }) {\n  const [state, setState] = useState({\n    company: null,\n    isLoading: true,\n  });\n\n  const companyId = Number(match.params.id);\n  const { company, isLoading } = state;\n\n  const fetchCompany = async () => {\n    setState(state => ({ ...state, isLoading: true }));\n    try {\n      const result = await getCompanyById(companyId);\n      setState(state => ({\n        ...state,\n        company: result,\n      }));\n    } finally {\n      setState(state => ({\n        ...state,\n        isLoading: false\n      }));\n    }\n  };\n\n  useEffect(() => {\n    fetchCompany();\n  }, []);\n\n  const appBar = (\n    <SimpleAppBar\n      title={isLoading ? 'Please wait...' : (company.name || undefined)}\n    />\n  );\n\n  return (\n    <PageWithAppBar\n      appBar={appBar}\n      isLoading={state.isLoading}\n    >\n      {!isLoading && company ? (\n        <CompanyDetails company={company} />\n      ) : null}\n    </PageWithAppBar>\n  );\n}\n\nCompanyDetailsPage.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default CompanyDetailsPage;\n","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nimport CompaniesTablePage from './companies/ui/CompaniesTablePage';\nimport CompanyDetailsPage from './companies/ui/CompanyDetailsPage';\n\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route exact path=\"/\" component={CompaniesTablePage} />\n        <Route path=\"/details/:id\" component={CompanyDetailsPage} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}